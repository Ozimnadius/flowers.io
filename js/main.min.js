//@prepros-append pages/common.js
//@prepros-append pages/inputs.js
//@prepros-append pages/index.js
//@prepros-append pages/sliders.js
//@prepros-append pages/catalog.js
//@prepros-append pages/product.js
//@prepros-append pages/compare.js
//@prepros-append pages/news.js
//@prepros-append pages/contacts.js
//@prepros-append pages/popup.js
//@prepros-append pages/mmenu.js




// common.js
function getNumber(str) {
    return parseInt(str.replace(/\s/g, ''));
}

function imageResize(src, cls) {
    if (cls) {
        $(cls).not('.logo__img').attr('src', src);
    } else {
        $('img').not('.logo__img').attr('src', src);
    }

}

// imageResize('https://loremflickr.com/100/56','');


function number_format(number, decimals, dec_point, thousands_sep) {
    var i, j, kw, kd, km;
    if (isNaN(decimals = Math.abs(decimals))) {
        decimals = 2;
    }
    if (dec_point == undefined) {
        dec_point = ",";
    }
    if (thousands_sep == undefined) {
        thousands_sep = ".";
    }
    i = parseInt(number = (+number || 0).toFixed(decimals)) + "";
    if ((j = i.length) > 3) {
        j = j % 3;
    } else {
        j = 0;
    }
    km = (j ? i.substr(0, j) + thousands_sep : "");
    kw = i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands_sep);
    kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(/-/, 0).slice(2) : "");
    return km + kw + kd;
}

function prettify(num) {
    var n = num.toString();
    return n.replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g, "$1" + ' ');
}

function Cut(selector,size) {
    this.items = $(selector);
    this.size = size;
    let that = this;

    this.init = function () {
        that.items.each(function (indx,elem) {
            let item = $(elem),
                text = item.text();

            if(text.length > that.size){
                item.text(text.slice(0, that.size) + ' ...');
            }
        });
    };

}

const wWidth = $(window).width();

$('.jsBuy,.jsOne,.jsFavorites,.jsCompare').on('click', function (e) {
    e.preventDefault();
});

$('input[type=tel]').mask('+7 (999) 999-99-99');







// inputs.js

// range
const rangeFrom = $('.range__input_from'),
    rangeTo = $('.range__input_to'),
    range = $('.range__slider'),
    rangeMin = range.data('min'),
    rangeMax = range.data('max');

$(".range__slider").ionRangeSlider({
    prettify_enabled: true,
    skin: 'round',
    hide_from_to: true,
    hide_min_max: true,
    onChange: function (data) {
        rangeFrom.val(data.from_pretty);
        rangeTo.val(data.to_pretty);
    },
    onFinish: function (data) {
        //ToDo Здесь должень быть ajax на получение товаров
    },
});
let rangeSlider = $(".range__slider").data("ionRangeSlider");

$('.range__input').on('keypress', function (e) {
    if (e.key.match(/[^0-9]/g) || (this.value == 0 && e.key == 0)) {
        e.preventDefault();
    }
});

$('.range__input').on('input', function (e) {
    let $this = $(this),
        val = '',
        from = getNumber(rangeFrom.val()),
        to = getNumber(rangeTo.val());

    if ($this.hasClass('range__input_from')) {
        if (from < rangeMin) {
            from = rangeMin;
        } else if (from > to) {
            from = to;
        }
        val = from;
    } else {
        if (to > rangeMax) {
            to = rangeMax;
        } else if (to < from) {
            to = from;
        }
        val = to;
    }

    let valPretty = prettify(val);

    rangeSlider.update({
        from: from,
        to: to
    });

    $this.val(valPretty);
});

// select
$('.select').styler();

$('.filter__select').on('change', function (e) {
    //ToDo Здесь должень быть ajax на получение товаров
});

let oDatepicker = $('.ofield__datepicker').datepicker({
    classes: 'odatepicker',
    offset: -1,
    autoClose: true,
    onShow: function (inst, animationCompleted) {
        $('.ofield__field_date').toggleClass('opened');
    },
    onHide: function (inst, animationCompleted) {
        $('.ofield__field_date').toggleClass('opened');
    },

}).data('datapicker');
//index.js
$(function () {

    let itemsWrap = $('.ipop__items .row');

    $('.fprice__top').on('click', function (e) {
        let $this = $(this),
            parent = $this.closest('.fprice');
        parent.toggleClass('opened');
    });

    $('body').on('click', function (e) {
        if ($(e.target).closest('.fprice').length == 0) {
            $('.fprice').removeClass('opened');
        }
    });

    $('.ipop__more').on('click', function (e) {
        //ToDo тут должен быт ajax
        let items = $('.ipop__item').clone();
        itemsWrap.append(items);
    });
});
//sliders.js
$(function () {
    let swiperSlider = new Swiper('.slider__container', {
        spaceBetween: 20,
        slidesPerView: 4,
        scrollbar: {
            el: '.slider__scrollbar-wrap',
            dragSize: 110,
            draggable: true
        },
        navigation: {
            nextEl: '.slider__next',
            prevEl: '.slider__prev',
        },
        breakpoints: {
            // when window width is >= 769.99px
            769.99: {
                slidesPerView: 2,
                spaceBetween: 10
            },
            // when window width is >= 1379.99px
            1379.99: {
                slidesPerView: 2,
            }
        }
    });

    let swiperPop = new Swiper('.pop__container', {
        spaceBetween: 20,
        slidesPerView: 4,
        scrollbar: {
            el: '.pop__scrollbar-wrap',
            dragSize: 110,
            draggable: true
        },
        navigation: {
            nextEl: '.pop__next',
            prevEl: '.pop__prev',
        },
    });

    let swiperWow = new Swiper('.iwow__container', {
        slidesPerView: 1,
        spaceBetween: 10,
        pagination: {
            el: '.iwow__pag',
            type: 'fraction',
        },
        navigation: {
            nextEl: '.iwow__next',
            prevEl: '.iwow__prev',
        }
    });


});
//catalog.js
$(function () {

    let catalog = $('.catalog__items'),
        btns = $('.catalog__type');

    btns.on('click', function (e) {
        let $this = $(this),
            type = $this.data('type'),
            items = catalog.find('.item');

        //ToDo здесь должен быть ajax
        if (!catalog.hasClass(type)) {
            btns.removeClass('active');
            $this.addClass('active');
            catalog.toggleClass('list blocks');
            items.toggleClass('list blocks');
        }


    });


    $('.filters__top').on('click', function (e) {
        let $this = $(this),
            filters = $this.closest('.filters');

        filters.toggleClass('active');

    });

});
//product.js
$(function () {

    const imgs = $('.product__image'),
        img = $('.product__img-img');

    imgs.on('click', function (e) {
        let $this = $(this),
            src = $this.data('src');


        imgs.removeClass('active');
        $this.addClass('active');
        img.attr('src',src);

    });

});
//compare.js
$(function () {


    let swiperCompare = new Swiper('.compare__container', {
        spaceBetween: 20,
        slidesPerView: 4,
        slidesPerGroup: 4,
        watchSlidesVisibility: true,
        pagination: {
            el: '.compare__pag',
            type: 'fraction',
        },
        navigation: {
            nextEl: '.compare__next',
            prevEl: '.compare__prev',
        },
        on: {
            update: function () {
                let pag = $('.compare__pag'),
                    current = pag.find('.swiper-pagination-current'),
                    total = pag.find('.swiper-pagination-total'),
                    slides = $(this.slides),
                    slidesVisible = slides.filter('.swiper-slide-visible');
                current.text(this.activeIndex + slidesVisible.length);
                total.text(slides.length);

                let arr = [];

                slidesVisible.each(function (indx, elem) {
                    arr.push($(elem).data('id'));
                });


                let newChars = new Chars(arr).init();
            },
            paginationUpdate: function (swiper, paginationEl) {
                let pag = $(paginationEl),
                    current = pag.find('.swiper-pagination-current'),
                    total = pag.find('.swiper-pagination-total'),
                    slides = $(this.slides),
                    slidesVisible = slides.filter('.swiper-slide-visible');
                current.text(this.activeIndex + slidesVisible.length);
                total.text(slides.length);

                let arr = [];

                slidesVisible.each(function (indx, elem) {
                    arr.push($(elem).data('id'));
                });


                let newChars = new Chars(arr).init();
            },
            click: function (e) {
                this.removeSlide(this.clickedIndex);
                this.update();
            }
        }

    });


    function Chars(arr) {
        this.charsList = {};
        this.charsObj = {};
        this.arr = arr;
        this.tmplChars = $(tmplChars.innerHTML);
        this.tmplItem = $(tmplCharsItem.innerHTML);
        this.tmplChar = $(tmplCharsChar.innerHTML);
        this.tmplPrice = $(tmplCharsPrice.innerHTML);
        this.tmplBtns = $(tmplCharsBtns.innerHTML);
        let that = this;

        this.init = function () {
            for (var key in chars) {
                let item = chars[key];
                Object.assign(that.charsList, item.list);
            }

            that.mergeChars();
            that.renderChars();
        };

        this.mergeChars = function () {
            //Добавляем id объектов
            that.charsObj.ids = [];
            that.arr.forEach(function (i, x, arr) {
                that.charsObj.ids.push(i);
            });

            //Добавляем цены объектов
            that.charsObj.prices = [];
            that.arr.forEach(function (i, x, arr) {
                that.charsObj.prices.push(chars[i].price);
            });

            //Добавляем все характристики
            that.charsObj.chars = {};
            for (var key in that.charsList) {
                that.charsObj.chars[key] = {};
                that.charsObj.chars[key].list = [];

                let val = chars[arr[0]].list[key],
                    dopClass = 'same';

                that.arr.forEach(function (i, x, arr) {
                    let value = chars[i].list[key];
                    that.charsObj.chars[key].list.push(value);

                    if (val != value) {
                        dopClass = '';
                    }
                });

                that.charsObj.chars[key].dopClass = dopClass;
            }
        };

        this.renderChars = function () {
            let chars = that.tmplChars.clone(),
                wrap = $('.compare__chars');
            renderList(chars);
            renderPrices(chars);
            renderBtns(chars);
            wrap.html(chars);

        };

        function renderList(chars) {
            let charsList = chars.find('.tmpList');

            for (let key in that.charsObj.chars) {
                charsList.append(renderItem(key, that.charsObj.chars[key]));
            }
            return charsList;
        };

        function renderItem(title, obj) {
            let item = that.tmplItem.clone(),
                itemTitle = item.find('.chars__item-title'),
                itemList = item.find('.tmpChars'),
                arr = obj.list;

            item.addClass(obj.dopClass);
            itemTitle.text(title);


            arr.forEach(function (i, x, arr) {
                itemList.append(renderChar(i));
            });
            return item;
        };

        function renderChar(title) {
            let char = that.tmplChar.clone();
            char.text(title);
            return char;
        };

        function renderPrices(chars) {
            let pricesList = chars.find('.tmpPrice');

            that.charsObj.prices.forEach(function (i, x, arr) {
                pricesList.append(renderPrice(i));
            });
            return pricesList;
        }

        function renderPrice(val) {
            let price = that.tmplPrice.clone();
            price.text(val);
            return price;
        }

        function renderBtns(chars) {
            let btnsList = chars.find('.tmpBtns');
            that.charsObj.ids.forEach(function (i, x, arr) {
                btnsList.append(renderBtn(i));
            });
            return btnsList;
        }

        function renderBtn(val) {
            let item = that.tmplBtns.clone(),
                buy = item.find('.char__buy'),
                one = item.find('.char__one');
            buy.attr('data-id', val);
            one.attr('data-id', val);

            return item;
        }

    };

    $('.compare__btn').on('click', function (e) {
        let btn = $(this),
            btns = $('.compare__btn'),
            sameChars = $('.chars__item.same');

        if(btn.hasClass('compare__btn_hide')){
            sameChars.addClass('hidden');
        } else{
            sameChars.removeClass('hidden');
        }

        btns.removeClass('active');
        btn.addClass('active');

    });

});
//news.js
$(function () {

    let nitemsCut = new Cut('.nitem__txt', 105).init();

    // let size = 105,
    //     newsContent= $('.nitem__txt');
    //
    // newsContent.each(function (indx,elem) {
    //     let item = $(elem),
    //         text = item.text();
    //
    //     if(text.length > size){
    //         item.text(text.slice(0, size) + ' ...');
    //     }
    // });


    $('.arts__list-row').masonry({
        itemSelector: '.arts__item',
    });

    // let aitemsCut = new Cut('.aitem__txt','155').init();


});
//contacts.js
$(function () {



});
//popup.js
$(function () {

    const templates = $('.templates'),
        popup = $('.popup'),
        popupContent = popup.find('.popup__content');


    $('body').on('click', '.jsCallorder', function (e) {
        e.preventDefault();

        let form = templates.find('[data-id=callorder]').clone().addClass('callorder');
        popupContent.html(form);
        popup.addClass('active');
        form.find('input[type=tel]').mask('+7 (999) 999-99-99');

        form.validate({
            rules: {
                callName: "required",
                callTel: "required",
            },
            messages: {
                callName: "Введите имя",
                callTel: "Введите телефон"
            },

            submitHandler: function (form) {
                let data = $(form).serialize();
                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: 'ajax.php',
                    data: data,
                    success: function (result) {
                        if (result.status) {
                            $(form).find('.form__content').html(result.html);
                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });
            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
                // debugger;
            }
        });

    });

    $('body').on('click', '.form__close, .form2__close', function (e) {
        e.preventDefault();
        popup.removeClass('active');
    });

    $('body').on('change', '.fz__input', function (e) {
        let $this = $(this),
            cls = $this.data('btn'),
            form = $this.closest('form'),
            btn = form.find('.' + cls);

        btn.toggleClass('disabled');
    });

    $('body').on('click', '.jsOne', function (e) {
        e.preventDefault();

        let form = templates.find('[data-id=fastbuy]').clone().addClass('fastbuy'),
            btn = $(this),
            id = btn.data('id'),
            formBtn = form.find('.form2__btn'),
            hidden = form.find('.form2__id');

        formBtn.attr('data-id', id);
        hidden.val(id);
        popupContent.html(form);
        popup.addClass('active');
        form.find('.form__select').styler();
        form.find('input[type=tel]').mask('+7 (999) 999-99-99');

        form.validate({
            rules: {
                fastName: "required",
                fastTel: "required",
                fastAddr: "required",
            },
            messages: {
                fastName: "Введите имя",
                fastTel: "Введите телефон",
                fastAddr: "Введите адрес"
            },

            submitHandler: function (form) {
                let data = $(form).serialize();
                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: 'ajax.php',
                    data: data,
                    success: function (result) {
                        if (result.status) {
                            $(form).find('.form2__content').html(result.html);
                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });
            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
                // debugger;
            }
        });


    });

    $('body').on('click', '.jsLazyman', function (e) {
        e.preventDefault();

        let form = templates.find('[data-id=lazyman]').clone().addClass('lazyman'),
            btn = $(this),
            id = btn.data('id'),
            hidden = form.find('.form__id');

        hidden.val(id);
        popupContent.html(form);
        popup.addClass('active');
        form.find('input[type=tel]').mask('+7 (999) 999-99-99');

        form.validate({
            rules: {
                lazyName: "required",
                lazyTel: "required",
            },
            messages: {
                lazyName: "Введите имя",
                lazyTel: "Введите телефон",
            },

            submitHandler: function (form) {
                let data = $(form).serialize();
                $.ajax({
                    dataType: "json",
                    type: "POST",
                    url: 'ajax.php',
                    data: data,
                    success: function (result) {
                        if (result.status) {
                            $(form).find('.form__content').html(result.html);
                        } else {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    },
                    error: function (result) {
                        alert('Что-то пошло не так, попробуйте еще раз!!!');
                    }
                });
            },
            invalidHandler: function (event, validator) {
                // debugger;
            },
            errorPlacement: function (error, element) {
                element[0].placeholder = error[0].innerText;
                // debugger;
            }
        });


    });
});
//mmenu.js
$(function () {
    const mmenu = $('.mmenu');

    $('.jsMmenuOpen').on('click', function (e) {
        mmenu.addClass('active');
    });
    $('.jsMmenuClose').on('click', function (e) {
        mmenu.removeClass('active');
    });

    $('.mnav__item-btn').on('click', function (e) {
        let btn = $(this),
            btns = $('.mnav__item-btn').not(btn),
            subnav = btn.next(),
            subnavs = $('.msubnav').not(subnav);

        btns.removeClass('active');
        btn.toggleClass('active');
        subnavs.slideUp(300);
        subnav.slideToggle(300)

    });

});

//# sourceMappingURL=main.min.js.map